# $t0 is buffer pointer
# $t1 is current node pointer
# $t2 is newline, used to check is input empty string
# $t3 is the first word of space in buffer, used to check exit condition
# $t7 is next node pointer

.data
promp:	.asciiz	"Please input yout string:\n"
newline:	.asciiz	"\n"

.text
main:
_start:
	# promp the user to input string
	li $v0, 4
	la $a0, promp
	syscall
	# call function to get the string
	jal getString
	# check is string is empty for exit printing
	lb $t2, newline
	lb $t3, ($t0)
	beq $t2, $t3, print
	# call function to make a new node
	jal newNode
	# load buffer pointer into new node
	sw $t0, ($t1)
	# load next node pointer into new node
	sw $t7, 4($t1)
	# update next node pointer with current node pointer
	move $t7, $t1
	# looping, back to top
	j main
	j _start
getString:
	# create 1kb buffer
	li $v0, 9
	li $a0, 1024
	syscall
	# save buffer address
	move $t0, $v0
	# get user input and store it in buffer
	li $v0, 8
	move $a0, $t0
	li $a1, 1024
	syscall
	# return to main function
	jr $ra
newNode:
	# create node space, 8 bytes
	li $v0, 9
	li $a0, 8
	syscall
	# save node address as current node pointer
	move $t1, $v0
	# return to main function
	jr $ra
print:
	# if next node pointer is 0, exit
	beq $t7, 0, exit
	# set current node pointer to next node pointer
	move $t1, $t7
	# print node content
	li $v0, 4
	lw $a0, ($t1)
	syscall
	# update $t7 with newer pointer
	lw $t7, 4($t1)
	# loop
	j print
exit:
	# terminates the program
	li $v0, 10
	syscall
